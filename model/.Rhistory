pred <- predict(model_obj, newdata = test)
# Plot evaluation
print(evaluate_and_plot_full_model(y, test$trip_seconds, pred, model = m, dataset = ds))
}, error = function(e) {
cat(paste0("❌ Error with model ", m, " on dataset ", ds, ": ", e$message, "\n"))
})
}
}
models <- list(
"GLM" = glm,
"LM" = lm,
"XGBOOST" = xgboost
)
for (ds in rev(names(df))) {
dataSet <- df[[ds]]
dataSet$weekday <- as.numeric(factor(dataSet$weekday))
dataSet <- remove_outliers_z(dataSet, "fare", "trip_seconds", 2)
train_index <- sample(1:nrow(dataSet), percentage * nrow(dataSet))
train <- dataSet[train_index, ]
test <- dataSet[-train_index, ]
# Extract target and clean test set
y <- test$fare
test <- test %>% select(-fare)
for (m in names(models)) {
print(paste0("Working on ", m , " with ", ds))
model_obj <- NULL
pred <- NULL
tryCatch({
if (m == "XGBOOST") {
train_matrix <- model.matrix(~ . -1, data = train %>% select(-fare))
test_matrix <- model.matrix(~ . -1, data = test)
dtrain <- xgb.DMatrix(data = train_matrix, label = train$fare)
dtest <- xgb.DMatrix(data = test_matrix)
params <- list(objective = "reg:squarederror", eta = 0.1, max_depth = 6)
model_obj <- xgboost(data = dtrain, params = params, nrounds = 100, verbose = 0)
pred <- predict(model_obj, dtest)
} else {
model_func <- models[[m]]
model_obj <- model_func(form, data = train, na.action = na.omit)
pred <- predict(model_obj, newdata = test)
}
# Plot evaluation
print(evaluate_and_plot_full_model(y, test$trip_seconds, pred, model = m, dataset = ds))
}, error = function(e) {
cat(paste0("❌ Error with model ", m, " on dataset ", ds, ": ", e$message, "\n"))
})
}
}
models <- list(
"GLM" = glm,
"LM" = lm,
"XGBOOST" = xgboost
)
for (ds in rev(names(df))) {
dataSet <- df[[ds]]
dataSet$weekday <- as.numeric(factor(dataSet$weekday))
dataSet <- remove_outliers_z(dataSet, "fare", "trip_seconds", 2)
train_index <- sample(1:nrow(dataSet), percentage * nrow(dataSet))
train <- dataSet[train_index, ]
test <- dataSet[-train_index, ]
# Extract target and clean test set
y <- test$fare
test <- test %>% select(-fare)
for (m in names(models)) {
print(paste0("Working on ", m , " with ", ds))
model_obj <- NULL
pred <- NULL
tryCatch({
if (m == "XGBOOST") {
train_clean <- train %>% drop_na()
test_clean <- test %>% drop_na()
# Create model matrices
train_matrix <- model.matrix(~ . -1, data = train_clean %>% select(-fare))
test_matrix <- model.matrix(~ . -1, data = test_clean)
# Labels must match cleaned data
train_labels <- train_clean$fare
test_durations <- test_clean$trip_seconds  # for evaluation
dtrain <- xgb.DMatrix(data = train_matrix, label = train$fare)
dtest <- xgb.DMatrix(data = test_matrix)
params <- list(objective = "reg:squarederror", eta = 0.1, max_depth = 6)
model_obj <- xgboost(data = dtrain, params = params, nrounds = 100, verbose = 0)
pred <- predict(model_obj, dtest)
} else {
model_func <- models[[m]]
model_obj <- model_func(form, data = train, na.action = na.omit)
pred <- predict(model_obj, newdata = test)
}
# Plot evaluation
print(evaluate_and_plot_full_model(y, test$trip_seconds, pred, model = m, dataset = ds))
}, error = function(e) {
cat(paste0("❌ Error with model ", m, " on dataset ", ds, ": ", e$message, "\n"))
})
}
}
models <- list(
"GLM" = glm,
"LM" = lm,
"XGBOOST" = xgboost
)
for (ds in rev(names(df))) {
dataSet <- df[[ds]]
dataSet$weekday <- as.numeric(factor(dataSet$weekday))
dataSet <- remove_outliers_z(dataSet, "fare", "trip_seconds", 2)
train_index <- sample(1:nrow(dataSet), percentage * nrow(dataSet))
train <- dataSet[train_index, ]
test <- dataSet[-train_index, ]
# Extract target and clean test set
y <- test$fare
test <- test %>% select(-fare)
for (m in names(models)) {
print(paste0("Working on ", m , " with ", ds))
model_obj <- NULL
pred <- NULL
tryCatch({
if (m == "XGBOOST") {
train_clean <- train %>% drop_na()
test_clean <- test %>% drop_na()
# Create model matrices
train_matrix <- model.matrix(~ . -1, data = train_clean %>% select(-fare))
test_matrix <- model.matrix(~ . -1, data = test_clean)
# Labels must match cleaned data
train_labels <- train_clean$fare
test_durations <- test_clean$trip_seconds  # for evaluation
dtrain <- xgb.DMatrix(data = train_matrix, label = train_labels)
dtest <- xgb.DMatrix(data = test_matrix)
params <- list(objective = "reg:squarederror", eta = 0.1, max_depth = 6)
model_obj <- xgboost(data = dtrain, params = params, nrounds = 100, verbose = 0)
pred <- predict(model_obj, dtest)
} else {
model_func <- models[[m]]
model_obj <- model_func(form, data = train, na.action = na.omit)
pred <- predict(model_obj, newdata = test)
}
# Plot evaluation
print(evaluate_and_plot_full_model(y, test$trip_seconds, pred, model = m, dataset = ds))
}, error = function(e) {
cat(paste0("❌ Error with model ", m, " on dataset ", ds, ": ", e$message, "\n"))
})
}
}
models <- list(
"XGBOOST" = xgboost,
"GLM" = glm,
"LM" = lm
)
for (ds in rev(names(df))) {
dataSet <- df[[ds]]
dataSet$weekday <- as.numeric(factor(dataSet$weekday))
dataSet <- remove_outliers_z(dataSet, "fare", "trip_seconds", 2)
train_index <- sample(1:nrow(dataSet), percentage * nrow(dataSet))
train <- dataSet[train_index, ]
test <- dataSet[-train_index, ]
# Extract target and clean test set
y <- test$fare
test <- test %>% select(-fare)
for (m in names(models)) {
print(paste0("Working on ", m , " with ", ds))
model_obj <- NULL
pred <- NULL
tryCatch({
if (m == "XGBOOST") {
train_clean <- train %>% drop_na()
test_clean <- test %>% drop_na()
# Create model matrices
train_matrix <- model.matrix(~ . -1, data = train_clean %>% select(-fare))
test_matrix <- model.matrix(~ . -1, data = test_clean)
# Labels must match cleaned data
train_labels <- train_clean$fare
test_durations <- test_clean$trip_seconds  # for evaluation
dtrain <- xgb.DMatrix(data = train_matrix, label = train_labels)
dtest <- xgb.DMatrix(data = test_matrix)
params <- list(objective = "reg:squarederror", eta = 0.1, max_depth = 6)
model_obj <- xgboost(data = dtrain, params = params, nrounds = 100, verbose = 0)
pred <- predict(model_obj, dtest)
print(evaluate_and_plot_full_model(y = test$fare[rownames(test_matrix)], test_durations, pred, model = m, dataset = ds))
} else {
model_func <- models[[m]]
model_obj <- model_func(form, data = train, na.action = na.omit)
pred <- predict(model_obj, newdata = test)
print(evaluate_and_plot_full_model(y, test$trip_seconds, pred, model = m, dataset = ds))
}
# Plot evaluation
}, error = function(e) {
cat(paste0("❌ Error with model ", m, " on dataset ", ds, ": ", e$message, "\n"))
})
}
}
models <- list(
"XGBOOST" = xgboost,
"GLM" = glm,
"LM" = lm
)
for (ds in rev(names(df))) {
dataSet <- df[[ds]]
dataSet$weekday <- as.numeric(factor(dataSet$weekday))
dataSet <- remove_outliers_z(dataSet, "fare", "trip_seconds", 2)
train_index <- sample(1:nrow(dataSet), percentage * nrow(dataSet))
train <- dataSet[train_index, ]
test <- dataSet[-train_index, ]
# Extract target and clean test set
y <- test$fare
for (m in names(models)) {
print(paste0("Working on ", m , " with ", ds))
model_obj <- NULL
pred <- NULL
tryCatch({
if (m == "XGBOOST") {
train_clean <- train %>% drop_na()
test_clean <- test %>% drop_na()
# Create model matrices
train_matrix <- model.matrix(~ . -1, data = train_clean %>% select(-fare))
test_matrix <- model.matrix(~ . -1, data = test_clean)
# Prepare labels and durations
train_labels <- train_clean$fare
test_labels <- test_clean$fare
test_durations <- test_clean$trip_seconds
# DMatrix conversion
dtrain <- xgb.DMatrix(data = train_matrix, label = train_labels)
dtest <- xgb.DMatrix(data = test_matrix)
# Train
params <- list(objective = "reg:squarederror", eta = 0.1, max_depth = 6)
model_obj <- xgboost(data = dtrain, params = params, nrounds = 100, verbose = 0)
# Predict
pred <- predict(model_obj, dtest)
# Evaluate
print(evaluate_and_plot_full_model(
y = test_labels,
duration_seconds = test_durations,
prediction = pred,
model = m,
dataset = ds
))
} else {
model_func <- models[[m]]
model_obj <- model_func(form, data = train, na.action = na.omit)
pred <- predict(model_obj, newdata = test %>% select(-fare))
print(evaluate_and_plot_full_model(y, test$trip_seconds, pred, model = m, dataset = ds))
}
# Plot evaluation
}, error = function(e) {
cat(paste0("❌ Error with model ", m, " on dataset ", ds, ": ", e$message, "\n"))
})
}
}
models <- list(
"XGBOOST" = xgboost,
"GLM" = glm,
"LM" = lm
)
for (ds in rev(names(df))) {
dataSet <- df[[ds]]
dataSet$weekday <- as.numeric(factor(dataSet$weekday))
dataSet <- remove_outliers_z(dataSet, "fare", "trip_seconds", 2)
train_index <- sample(1:nrow(dataSet), percentage * nrow(dataSet))
train <- dataSet[train_index, ]
test <- dataSet[-train_index, ]
# Extract target and clean test set
y <- test$fare
for (m in names(models)) {
print(paste0("Working on ", m , " with ", ds))
model_obj <- NULL
pred <- NULL
tryCatch({
if (m == "XGBOOST") {
train_clean <- train %>% drop_na()
test_clean <- test %>% drop_na()
xform <- fare ~ . - 1  # consistent formula without intercept
train_matrix <- model.matrix(xform, data = train_clean)
test_matrix <- model.matrix(xform, data = test_clean)
# Prepare labels and durations
train_labels <- train_clean$fare
test_labels <- test_clean$fare
test_durations <- test_clean$trip_seconds
# DMatrix conversion
dtrain <- xgb.DMatrix(data = train_matrix, label = train_labels)
dtest <- xgb.DMatrix(data = test_matrix)
# Train
params <- list(objective = "reg:squarederror", eta = 0.1, max_depth = 6)
model_obj <- xgboost(data = dtrain, params = params, nrounds = 100, verbose = 0)
# Predict
pred <- predict(model_obj, dtest)
# Evaluate
print(evaluate_and_plot_full_model(
y = test_labels,
duration_seconds = test_durations,
prediction = pred,
model = m,
dataset = ds
))
} else {
model_func <- models[[m]]
model_obj <- model_func(form, data = train, na.action = na.omit)
pred <- predict(model_obj, newdata = test %>% select(-fare))
print(evaluate_and_plot_full_model(y, test$trip_seconds, pred, model = m, dataset = ds))
}
# Plot evaluation
}, error = function(e) {
cat(paste0("❌ Error with model ", m, " on dataset ", ds, ": ", e$message, "\n"))
})
}
}
load_all_csv <- function(folder_path) {
files <- list.files(path = folder_path, pattern = "\\.csv$", full.names = TRUE)
if (length(files) == 0) {
warning("No CSV files found in the folder.")
return(NULL)
}
all_data <- list()
for (f in files) {
temp <- read.csv(f)
temp <- temp%>% select(-X, -trip_start_timestamp, -pickup_census_tract, -dropoff_census_tract, -pickup_census_tract_centroid, -dropoff_census_tract_centroid, -type, -dropoff_census_tract.1, -pickup_census_tract.1) %>% mutate(weekday = as.factor(weekday))
all_data[[f]] <- temp  # use filename as list name (optional but useful)
}
return(all_data)
}
evaluate_and_plot_full_model <- function(y, duration_seconds, prediction, model = "Model", dataset = "Dataset") {
if (length(y) != length(prediction) || length(y) != length(duration_seconds)) {
stop("All input vectors must have the same length.")
}
# Convert inputs
y <- as.numeric(y)
prediction <- as.numeric(prediction)
duration_minutes <- duration_seconds / 60
# --- Metrics ---
valid_idx <- which(!is.na(y) & !is.na(prediction) & !is.na(duration_minutes) & y != 0)
y_valid <- y[valid_idx]
prediction_valid <- prediction[valid_idx]
duration_valid <- duration_minutes[valid_idx]
rmse_val <- tryCatch(rmse(y_valid, prediction_valid), error = function(e) NA)
mae_val <- tryCatch(mae(y_valid, prediction_valid), error = function(e) NA)
r2_val <- tryCatch(1 - sum((y_valid - prediction_valid)^2) / sum((y_valid - mean(y_valid))^2), error = function(e) NA)
squared_errors <- (y_valid - prediction_valid)^2
scaling_factors <- 10 / duration_valid
rmse_10min <- sqrt(mean(squared_errors * scaling_factors^2, na.rm = TRUE))
ae_percent <- abs(y_valid - prediction_valid) / y_valid
mean_ae_percent <- mean(ae_percent, na.rm = TRUE)
is_ok <- (rmse_10min < 2) & (mean_ae_percent < 0.05)
# --- Plots ---
# 1. Prediction vs Actual
p_pred <- ggplot(data.frame(y = y_valid, prediction = prediction_valid), aes(x = y, y = prediction)) +
geom_point(color = "steelblue", alpha = 0.6) +
geom_abline(intercept = 0, slope = 1, color = "red", linetype = "dashed") +
labs(
title = paste(model, "Predictions"),
subtitle = paste0("(N = ", length(y_valid), ")"),
x = "Actual",
y = "Predicted"
) +
theme_minimal()
# 2. Metric bar chart
metric_df <- data.frame(
Metric = c("RMSE", "MAE", "R²"),
Value = c(rmse_val, mae_val, r2_val)
)
p_metrics <- ggplot(metric_df, aes(x = Metric, y = Value, fill = Metric)) +
geom_col(width = 0.6, show.legend = FALSE) +
geom_text(aes(label = round(Value, 2)), vjust = -0.5, size = 4) +
scale_y_continuous(expand = expansion(mult = c(0, 0.4))) +
labs(
title = "Model Evaluation Metrics",
y = NULL, x = NULL
) +
theme_minimal()
# 3. Summary: RMSE 10min vs %AE
summary_df <- data.frame(
RMSE_10min = rmse_10min,
Mean_AE_percent = mean_ae_percent,
Status = ifelse(is_ok, "OK", "Not OK")
)
p_summary <- ggplot(summary_df, aes(x = RMSE_10min, y = Mean_AE_percent)) +
geom_point(aes(color = Status), size = 5) +
geom_vline(xintercept = 2, linetype = "dashed", color = "black") +
geom_hline(yintercept = 0.05, linetype = "dashed", color = "black") +
scale_color_manual(values = c("OK" = "green", "Not OK" = "red")) +
labs(
title = "Evaluation: Scaled RMSE vs % Error",
x = "RMSE (scaled to 10 min)",
y = "Mean Absolute Error (%)"
) +
theme_minimal()
# 4. Individual error scatter
individual_df <- data.frame(
AbsoluteError_10min = abs(y_valid - prediction_valid) * (10 / duration_valid),
PercentError = ae_percent
)
p_individual <- ggplot(individual_df, aes(x = AbsoluteError_10min, y = duration_valid)) +
geom_point(alpha = 0.6, color = "blue") +
geom_hline(yintercept = 0.05, linetype = "dashed", color = "black") +
labs(
title = "Individual Errors",
x = "Absolute Error (scaled to 10 min)",
y = "duration in minutes"
) +
theme_minimal()
# --- Combine plots ---
combined_plot <- (p_pred | p_metrics) / (p_summary | p_individual)
return(combined_plot)
}
models <- list(
"XGBOOST" = xgboost,
"GLM" = glm,
"LM" = lm
)
for (ds in rev(names(df))) {
dataSet <- df[[ds]]
dataSet$weekday <- as.numeric(factor(dataSet$weekday))
dataSet <- remove_outliers_z(dataSet, "fare", "trip_seconds", 2)
train_index <- sample(1:nrow(dataSet), percentage * nrow(dataSet))
train <- dataSet[train_index, ]
test <- dataSet[-train_index, ]
# Extract target and clean test set
y <- test$fare
for (m in names(models)) {
print(paste0("Working on ", m , " with ", ds))
model_obj <- NULL
pred <- NULL
tryCatch({
if (m == "XGBOOST") {
train_clean <- train %>% drop_na()
test_clean <- test %>% drop_na()
xform <- fare ~ . - 1  # consistent formula without intercept
train_matrix <- model.matrix(xform, data = train_clean)
test_matrix <- model.matrix(xform, data = test_clean)
# Prepare labels and durations
train_labels <- train_clean$fare
test_labels <- test_clean$fare
test_durations <- test_clean$trip_seconds
# DMatrix conversion
dtrain <- xgb.DMatrix(data = train_matrix, label = train_labels)
dtest <- xgb.DMatrix(data = test_matrix)
# Train
params <- list(objective = "reg:squarederror", eta = 0.1, max_depth = 6)
model_obj <- xgboost(data = dtrain, params = params, nrounds = 100, verbose = 0)
# Predict
pred <- predict(model_obj, dtest)
# Evaluate
print(evaluate_and_plot_full_model(
y = test_labels,
duration_seconds = test_durations,
prediction = pred,
model = m,
dataset = ds
))
} else {
model_func <- models[[m]]
model_obj <- model_func(form, data = train, na.action = na.omit)
pred <- predict(model_obj, newdata = test %>% select(-fare))
print(evaluate_and_plot_full_model(y, test$trip_seconds, pred, model = m, dataset = ds))
}
# Plot evaluation
}, error = function(e) {
cat(paste0("❌ Error with model ", m, " on dataset ", ds, ": ", e$message, "\n"))
})
}
}
models <- list(
"XGBOOST" = xgboost,
"GLM" = glm,
"LM" = lm
)
for (ds in rev(names(df))) {
dataSet <- df[[ds]] %>% filter(trip_seconds > 60)
dataSet$weekday <- as.numeric(factor(dataSet$weekday))
dataSet <- remove_outliers_z(dataSet, "fare", "trip_seconds", 2)
train_index <- sample(1:nrow(dataSet), percentage * nrow(dataSet))
train <- dataSet[train_index, ]
test <- dataSet[-train_index, ]
# Extract target and clean test set
y <- test$fare
for (m in names(models)) {
print(paste0("Working on ", m , " with ", ds))
model_obj <- NULL
pred <- NULL
tryCatch({
if (m == "XGBOOST") {
train_clean <- train %>% drop_na()
test_clean <- test %>% drop_na()
xform <- fare ~ . - 1  # consistent formula without intercept
train_matrix <- model.matrix(xform, data = train_clean)
test_matrix <- model.matrix(xform, data = test_clean)
# Prepare labels and durations
train_labels <- train_clean$fare
test_labels <- test_clean$fare
test_durations <- test_clean$trip_seconds
# DMatrix conversion
dtrain <- xgb.DMatrix(data = train_matrix, label = train_labels)
dtest <- xgb.DMatrix(data = test_matrix)
# Train
params <- list(objective = "reg:squarederror", eta = 0.1, max_depth = 6)
model_obj <- xgboost(data = dtrain, params = params, nrounds = 100, verbose = 0)
# Predict
pred <- predict(model_obj, dtest)
# Evaluate
print(evaluate_and_plot_full_model(
y = test_labels,
duration_seconds = test_durations,
prediction = pred,
model = m,
dataset = ds
))
} else {
model_func <- models[[m]]
model_obj <- model_func(form, data = train, na.action = na.omit)
pred <- predict(model_obj, newdata = test %>% select(-fare))
print(evaluate_and_plot_full_model(y, test$trip_seconds, pred, model = m, dataset = ds))
}
# Plot evaluation
}, error = function(e) {
cat(paste0("❌ Error with model ", m, " on dataset ", ds, ": ", e$message, "\n"))
})
}
}
