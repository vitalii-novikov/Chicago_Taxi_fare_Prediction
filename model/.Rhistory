ensureLibrary <- function(pkg) {
suppressPackageStartupMessages({
if (!requireNamespace(pkg, quietly = TRUE)) {
install.packages(pkg)
}
library(pkg, character.only = TRUE)
})
}
ensureLibrary("httr")
ensureLibrary("jsonlite")
ensureLibrary("dplyr")
ensureLibrary("tidyr")
ensureLibrary("lubridate")
ensureLibrary("ggplot2")
ensureLibrary("readr")
ensureLibrary("caret")
ensureLibrary("purrr")
ensureLibrary("ggplot2")
ensureLibrary("neuralnet")
ensureLibrary("xgboost")
ensureLibrary("randomForest")
ensureLibrary("patchwork")
ensureLibrary("Metrics")
load_all_csv <- function(folder_path) {
files <- list.files(path = folder_path, pattern = "\\.csv$", full.names = TRUE)
if (length(files) == 0) {
warning("No CSV files found in the folder.")
return(NULL)
}
all_data <- lapply(files, function(file) {
temp <- read_csv(file, show_col_types = FALSE)
print(paste("Rows before filtering:", nrow(temp)))
return(temp)
}) %>%
bind_rows()
return(all_data)
}
showPredictions <- function(predict, test, model) {
# Ensure numeric vectors
predict <- as.numeric(predict)
test <- as.numeric(test)
# Calculate metrics
rmse_val <- rmse(test, predict)
mae_val <- mae(test, predict)
r2_val <- 1 - sum((test - predict)^2) / sum((test - mean(test))^2)
# Prepare metrics for plotting
metrics_df <- data.frame(
Metric = c("RMSE", "MAE", "RÂ²"),
Value = c(rmse_val, mae_val, r2_val)
)
# Scatter plot
gp1 <- ggplot() +
aes(x = test, y = predict) +
geom_point(color = "steelblue", alpha = 0.6) +
coord_equal(xlim = c(0, 200), ylim = c(0, 200)) +
geom_abline(intercept = 0, slope = 1, color = "red", linetype = "dashed") +
labs(
title = paste(model, "Predictions"),
subtitle = paste0("(N = ", length(predict), ")"),
x = "Actual Fare",
y = "Predicted Fare"
) +
theme_minimal()
# Bar chart of metrics
gp2 <- ggplot(metrics_df, aes(x = Metric, y = Value, fill = Metric)) +
geom_col(width = 0.6, show.legend = FALSE) +
geom_text(aes(label = round(Value, 2)), vjust = -0.5, size = 4) +
labs(
title = "Model Evaluation Metrics",
y = NULL, x = NULL
) +
theme_minimal() +
ylim(0, max(metrics_df$Value) * 1.2)
# Combine and return both plots
return(gp1 + gp2)
}
