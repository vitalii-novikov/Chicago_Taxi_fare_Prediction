if (month == 12) {
end_date <- sprintf("%04d-01-01T00:00:00", year + 1)
} else {
end_date <- sprintf("%04d-%02d-01T00:00:00", year, month + 1)
}
offset <- 0L
all_data <- list()
finished <- FALSE
cat("Downloading:", year, month, "\n")
while (!finished) {
resp <- GET(
url = base_url,
query = list(
`$where` = paste0(
"trip_start_timestamp >= '", start_date,
"' AND trip_start_timestamp < '", end_date, "'"
),
`$limit` = limit,
`$offset` = as.integer(offset)
)
)
if (status_code(resp) != 200) {
print(resp$url)
warning("API error at ", year, "-", month, " offset ", offset)
break
}
data_chunk <- fromJSON(rawToChar(resp$content))
if (length(data_chunk) == 0) {
finished <- TRUE
break
}
clean_data <- clean_chunk(data_chunk)
all_data[[length(all_data) + 1]] <- clean_data
cat(sprintf("  Rows downloaded: %d\n", offset + nrow(clean_data)))
offset <- offset + limit
}
if (length(all_data) > 0) {
monthly_data <- bind_rows(all_data)
# Clean timestamps
cleaned_data <- monthly_data %>%
filter(!is.na(trip_start_timestamp)) %>%
mutate(
trip_start_timestamp = suppressWarnings(ymd_hms(trip_start_timestamp))
) %>%
filter(!is.na(trip_start_timestamp), !is.na(trip_end_timestamp)) %>%
mutate(
trip_start_timestamp = floor_date(trip_start_timestamp, unit = "15 minutes")
)
# Select and aggregate
final_data <- cleaned_data %>%
select(
trip_start_timestamp,
pickup_census_tract,
dropoff_census_tract,
trip_seconds,
trip_miles,
fare,
tips,
tolls,
extras,
trip_total
) %>%
group_by(
trip_start_timestamp,
pickup_census_tract,
dropoff_census_tract
) %>%
summarise(
trip_seconds = mean(as.numeric(trip_seconds), na.rm = TRUE),
trip_miles   = mean(as.numeric(trip_miles), na.rm = TRUE),
fare         = mean(as.numeric(fare), na.rm = TRUE),
tips         = mean(as.numeric(tips), na.rm = TRUE),
tolls        = mean(as.numeric(tolls), na.rm = TRUE),
extras       = mean(as.numeric(extras), na.rm = TRUE),
trip_total   = mean(as.numeric(trip_total), na.rm = TRUE),
count        = n(),
.groups = "drop"
)
print("\n--------------------")
print(paste0("Data for month total: ", nrow(monthly_data)))
print(paste0("cleaned Data for month: ",nrow(cleaned_data)))
print(paste0("finald Data for month: ",nrow(final_data), " Reduction by ", round(nrow(final_data)/nrow(monthly_data)*100,2), "%"))
print("--------------------\n")
file_name <- sprintf("../all_data/chicago_taxi_%04d_%02d.csv", year, month)
write_csv(final_data, file_name)
cat("  ✔ Saved:", file_name, "- Total rows:", nrow(final_data), "\n")
} else {
cat("  ⚠ No data for:", year, month, "\n")
}
}
}
ensureLibrary <- function(pkg) {
suppressPackageStartupMessages({
if (!requireNamespace(pkg, quietly = TRUE)) {
install.packages(pkg)
}
library(pkg, character.only = TRUE)
})
}
ensureLibrary("httr")
ensureLibrary("jsonlite")
ensureLibrary("dplyr")
ensureLibrary("tidyr")
ensureLibrary("lubridate")
ensureLibrary("ggplot2")
ensureLibrary("readr")
ensureLibrary("caret")
ensureLibrary("purrr")
load_all_csv <- function(folder_path) {
files <- list.files(path = folder_path, pattern = "\\.csv$", full.names = TRUE)
all_data <- lapply(files, readr::read_csv) %>%
dplyr::bind_rows()
return(all_data)
}
df <- load_all_csv("../all_data/")
df
ensureLibrary <- function(pkg) {
suppressPackageStartupMessages({
if (!requireNamespace(pkg, quietly = TRUE)) {
install.packages(pkg)
}
library(pkg, character.only = TRUE)
})
}
ensureLibrary("httr")
ensureLibrary("jsonlite")
ensureLibrary("dplyr")
ensureLibrary("tidyr")
ensureLibrary("lubridate")
ensureLibrary("ggplot2")
ensureLibrary("readr")
ensureLibrary("caret")
ensureLibrary("purrr")
ensureLibrary("ggplot2")
df %>% ggplot() +
aes(x=trip_start_timestamp, y=(fare/trip_miles)) +
geom_point()
df %>% ggplot() +
aes(x=trip_start_timestamp, y=(fare/trip_miles)) +
geom_point() +
y_lim(c(0,100000))
df %>% ggplot() +
aes(x=trip_start_timestamp, y=(fare/trip_miles)) +
geom_point() +
ylim(c(0,100000))
df %>% ggplot() +
aes(x=trip_start_timestamp, y=(fare/trip_miles)) +
geom_histogram()
df %>% ggplot() +
aes(x=(fare/trip_miles)) +
geom_histogram()
df %>% ggplot() +
aes(x=fare) +
geom_histogram()
df %>% filter(trip_miles > 0, fare > 0) %>% ggplot() +
aes(x=fare, y=trip_miles) +
geom_histogram()
df %>% filter(trip_miles > 0, fare > 0) %>% ggplot() +
aes(x=fare)
df %>% filter(trip_miles > 0.0, fare > 0.0) %>% ggplot() +
aes(x=fare)
df %>% filter(trip_miles > 0.0, fare > 0.0) %>% ggplot() +
aes(x=fare) +
geom_histogram()
df %>% filter(trip_miles > 0.0 & fare > 0.0 & fare < 100) %>% ggplot() +
aes(x=fare) +
geom_histogram()
df %>% filter(trip_miles > 0.0 & fare > 0.0 & fare < 50) %>% ggplot() +
aes(x=fare) +
geom_histogram()
df %>% filter(trip_miles > 0.0 & fare >= 0.0 & fare < 50) %>% ggplot() +
aes(x=fare) +
geom_histogram()
df %>% filter(trip_miles > 0.0 & fare >= 0.0 & fare < 50) %>% nrow()
df %>% filter(trip_miles > 0.0 & fare >= 0.0 ) %>% nrow()
df %>% filter(trip_miles > 0.0 & fare > 0.0 & trip_seconds > 0.0 & !is.na(pickup_census_tract) & !is.na(dropoff_census_tract)) %>% nrow()
df %>% filter(trip_miles > 0.0 & fare > 0.0 & trip_seconds > 0.0 & !is.na(pickup_census_tract) & !is.na(dropoff_census_tract)) %>% ggplot()
aes(x=trip_start_timestamp, y=trip_total) + geom_point()
df %>%
filter(trip_miles > 0.0 & fare > 0.0 & trip_seconds > 0.0 & !is.na(pickup_census_tract) & !is.na(dropoff_census_tract)) %>%
ggplot() +
aes(x=trip_start_timestamp, y=trip_total) +
geom_point()
df %>%
filter(trip_miles > 0.0 & fare > 0.0 & trip_seconds > 0.0 & !is.na(pickup_census_tract) & !is.na(dropoff_census_tract)) %>%
ggplot() +
aes(x=trip_start_timestamp, y=(trip_total/trip_miles)) +
geom_point()
df %>%
filter(trip_miles > 0.0 & fare > 0.0 & trip_seconds > 0.0 & !is.na(pickup_census_tract) & !is.na(dropoff_census_tract)) %>%
ggplot() +
aes(x=trip_start_timestamp, y=(trip_total/trip_miles)) +
geom_point() +
ylim(0,100)
df %>%
filter(trip_miles > 0.0 & fare > 0.0 & trip_seconds > 0.0 & !is.na(pickup_census_tract) & !is.na(dropoff_census_tract)) %>%
ggplot() +
aes(y=trip_total) +
geom_boxplot()
detect_outliers_iqr <- function(x) {
Q1 <- quantile(x, 0.25, na.rm = TRUE)
Q3 <- quantile(x, 0.75, na.rm = TRUE)
IQR_val <- Q3 - Q1
lower <- Q1 - 1.5 * IQR_val
upper <- Q3 + 1.5 * IQR_val
return(which(x < lower | x > upper))
}
outlierIndeces <- df %>%
filter(trip_miles > 0.0 & fare > 0.0 & trip_seconds > 0.0 & !is.na(pickup_census_tract) & !is.na(dropoff_census_tract)) %>%
detect_outliers_iqr()
outlierIndeces <- df %>%
filter(trip_miles > 0.0 & fare > 0.0 & trip_seconds > 0.0 & !is.na(pickup_census_tract) & !is.na(dropoff_census_tract)) %>% select(trip_total) %>%
detect_outliers_iqr()
outlierLess <- df[-outlierIndeces, ]
outlierLess
outlierIndeces <- df  %>% select(trip_total) %>%  detect_outliers_iqr()
outlierLess <- df[-outlierIndeces, ] %>% filter(trip_miles > 0.0 & fare > 0.0 & trip_seconds > 0.0 & !is.na(pickup_census_tract) & !is.na(dropoff_census_tract))
outlierLess
outlierLess %>% filter(count > 1)
outlierLess %>% filter(count > 5)
ensureLibrary <- function(pkg) {
if (!requireNamespace(pkg, quietly = TRUE)) {
install.packages(pkg)
}
library(pkg, character.only = TRUE)
}
ensureLibrary("httr")
ensureLibrary("jsonlite")
ensureLibrary("dplyr")
ensureLibrary("tidyr")
ensureLibrary("lubridate")
ensureLibrary("ggplot2")
ensureLibrary("readr")
ensureLibrary("caret")
ensureLibrary("purrr")
# setup
years = c(2013)
base_url = "https://data.cityofchicago.org/resource/wrvz-psew.json"
limit = 50000
cols_to_drop <- c(
"trip_id",
"taxi_id",
"pickup_centroid_location",
"dropoff_centroid_location",
"payment_type",
"company",
"pickup_centroid_lingitude",
"pickup_centroid_latitude",
"dropoff_centroid_longitude",
"dropoff_centroid_latitude"
)
clean_chunk <- function(df) {
df <- df %>%
select(-any_of(cols_to_drop)) %>%
mutate(
trip_seconds = as.numeric(trip_seconds),
trip_miles = as.numeric(trip_miles),
fare = as.numeric(fare),
tips = as.numeric(tips),
tolls = as.numeric(tolls),
extras = as.numeric(extras),
trip_total = as.numeric(trip_total),
pickup_community_area = as.integer(pickup_community_area),
dropoff_community_area = as.integer(dropoff_community_area),
trip_start_timestamp = ymd_hms(trip_start_timestamp),
trip_end_timestamp = ymd_hms(trip_end_timestamp)
)
return(df)
}
for (year in years) {
for (month in c(1)) {  # You can replace c(1) with 1:12 for full-year
# Create time range for the full month
start_date <- sprintf("%04d-%02d-01T00:00:00", year, month)
if (month == 12) {
end_date <- sprintf("%04d-01-01T00:00:00", year + 1)
} else {
end_date <- sprintf("%04d-%02d-01T00:00:00", year, month + 1)
}
offset <- 0L
all_data <- list()
finished <- FALSE
cat("Downloading:", year, month, "\n")
while (!finished) {
resp <- GET(
url = base_url,
query = list(
`$where` = paste0(
"trip_start_timestamp >= '", start_date, "' AND ",
"trip_start_timestamp < '", end_date, "' AND ",
"trip_miles > 0 AND fare > 0 AND trip_seconds > 0 AND ",
"pickup_census_tract IS NOT NULL AND dropoff_census_tract IS NOT NULL"
),
`$limit` = limit,
`$offset` = as.integer(offset)
)
)
if (status_code(resp) != 200) {
print(resp$url)
warning("API error at ", year, "-", month, " offset ", offset)
break
}
data_chunk <- fromJSON(rawToChar(resp$content))
if (length(data_chunk) == 0) {
finished <- TRUE
break
}
clean_data <- clean_chunk(data_chunk)
all_data[[length(all_data) + 1]] <- clean_data
cat(sprintf("  Rows downloaded: %d\n", offset + nrow(clean_data)))
offset <- offset + limit
}
if (length(all_data) > 0) {
monthly_data <- bind_rows(all_data)
# Clean timestamps
cleaned_data <- monthly_data %>%
filter(!is.na(trip_start_timestamp)) %>%
mutate(
trip_start_timestamp = suppressWarnings(ymd_hms(trip_start_timestamp))
) %>%
filter(!is.na(trip_start_timestamp), !is.na(trip_end_timestamp)) %>%
mutate(
trip_start_timestamp = floor_date(trip_start_timestamp, unit = "15 minutes")
)
# Select and aggregate
final_data <- cleaned_data %>%
select(
trip_start_timestamp,
pickup_census_tract,
dropoff_census_tract,
trip_seconds,
trip_miles,
fare,
tips,
tolls,
extras,
trip_total
) %>%
group_by(
trip_start_timestamp,
pickup_census_tract,
dropoff_census_tract
) %>%
summarise(
trip_seconds = mean(as.numeric(trip_seconds), na.rm = TRUE),
trip_miles   = mean(as.numeric(trip_miles), na.rm = TRUE),
fare         = mean(as.numeric(fare), na.rm = TRUE),
tips         = mean(as.numeric(tips), na.rm = TRUE),
tolls        = mean(as.numeric(tolls), na.rm = TRUE),
extras       = mean(as.numeric(extras), na.rm = TRUE),
trip_total   = mean(as.numeric(trip_total), na.rm = TRUE),
count        = n(),
.groups = "drop"
)
print("--------------------")
print(paste0("Data for month total: ", nrow(monthly_data)))
print(paste0("cleaned Data for month: ",nrow(cleaned_data)))
print(paste0("finald Data for month: ",nrow(final_data), " Reduction by ", round(nrow(final_data)/nrow(monthly_data)*100,2), "%"))
print("--------------------")
file_name <- sprintf("../all_data/chicago_taxi_%04d_%02d.csv", year, month)
write_csv(final_data, file_name)
cat("  ✔ Saved:", file_name, "- Total rows:", nrow(final_data), "\n")
} else {
cat("  ⚠ No data for:", year, month, "\n")
}
}
}
ensureLibrary <- function(pkg) {
if (!requireNamespace(pkg, quietly = TRUE)) {
install.packages(pkg)
}
library(pkg, character.only = TRUE)
}
ensureLibrary("httr")
ensureLibrary("jsonlite")
ensureLibrary("dplyr")
ensureLibrary("tidyr")
ensureLibrary("lubridate")
ensureLibrary("ggplot2")
ensureLibrary("readr")
ensureLibrary("caret")
ensureLibrary("purrr")
# setup
years = c(2013)
base_url = "https://data.cityofchicago.org/resource/wrvz-psew.json"
limit = 50000
cols_to_drop <- c(
"trip_id",
"taxi_id",
"pickup_centroid_location",
"dropoff_centroid_location",
"payment_type",
"company",
"pickup_centroid_lingitude",
"pickup_centroid_latitude",
"dropoff_centroid_longitude",
"dropoff_centroid_latitude"
)
clean_chunk <- function(df) {
df <- df %>%
select(-any_of(cols_to_drop)) %>%
mutate(
trip_seconds = as.numeric(trip_seconds),
trip_miles = as.numeric(trip_miles),
fare = as.numeric(fare),
tips = as.numeric(tips),
tolls = as.numeric(tolls),
extras = as.numeric(extras),
trip_total = as.numeric(trip_total),
pickup_community_area = as.integer(pickup_community_area),
dropoff_community_area = as.integer(dropoff_community_area),
trip_start_timestamp = ymd_hms(trip_start_timestamp),
trip_end_timestamp = ymd_hms(trip_end_timestamp)
)
return(df)
}
for (year in years) {
for (month in 1:12) {  # You can replace c(1) with 1:12 for full-year
# Create time range for the full month
start_date <- sprintf("%04d-%02d-01T00:00:00", year, month)
if (month == 12) {
end_date <- sprintf("%04d-01-01T00:00:00", year + 1)
} else {
end_date <- sprintf("%04d-%02d-01T00:00:00", year, month + 1)
}
offset <- 0L
all_data <- list()
finished <- FALSE
cat("Downloading:", year, month, "\n")
while (!finished) {
resp <- GET(
url = base_url,
query = list(
`$where` = paste0(
"trip_start_timestamp >= '", start_date, "' AND ",
"trip_start_timestamp < '", end_date, "' AND ",
"trip_miles > 0 AND fare > 0 AND trip_seconds > 0 AND ",
"pickup_census_tract IS NOT NULL AND dropoff_census_tract IS NOT NULL"
),
`$limit` = limit,
`$offset` = as.integer(offset)
)
)
if (status_code(resp) != 200) {
print(resp$url)
warning("API error at ", year, "-", month, " offset ", offset)
break
}
data_chunk <- fromJSON(rawToChar(resp$content))
if (length(data_chunk) == 0) {
finished <- TRUE
break
}
clean_data <- clean_chunk(data_chunk)
all_data[[length(all_data) + 1]] <- clean_data
cat(sprintf("  Rows downloaded: %d\n", offset + nrow(clean_data)))
offset <- offset + limit
}
if (length(all_data) > 0) {
monthly_data <- bind_rows(all_data)
# Clean timestamps
cleaned_data <- monthly_data %>%
filter(!is.na(trip_start_timestamp)) %>%
mutate(
trip_start_timestamp = suppressWarnings(ymd_hms(trip_start_timestamp))
) %>%
filter(!is.na(trip_start_timestamp), !is.na(trip_end_timestamp)) %>%
mutate(
trip_start_timestamp = floor_date(trip_start_timestamp, unit = "15 minutes")
)
# Select and aggregate
final_data <- cleaned_data %>%
select(
trip_start_timestamp,
pickup_census_tract,
dropoff_census_tract,
trip_seconds,
trip_miles,
fare,
tips,
tolls,
extras,
trip_total
) %>%
group_by(
trip_start_timestamp,
pickup_census_tract,
dropoff_census_tract
) %>%
summarise(
trip_seconds = mean(as.numeric(trip_seconds), na.rm = TRUE),
trip_miles   = mean(as.numeric(trip_miles), na.rm = TRUE),
fare         = mean(as.numeric(fare), na.rm = TRUE),
tips         = mean(as.numeric(tips), na.rm = TRUE),
tolls        = mean(as.numeric(tolls), na.rm = TRUE),
extras       = mean(as.numeric(extras), na.rm = TRUE),
trip_total   = mean(as.numeric(trip_total), na.rm = TRUE),
count        = n(),
.groups = "drop"
)
print("--------------------")
print(paste0("Data for month total: ", nrow(monthly_data)))
print(paste0("cleaned Data for month: ",nrow(cleaned_data)))
print(paste0("finald Data for month: ",nrow(final_data), " Reduction by ", round((1-nrow(final_data)/nrow(monthly_data))*100,2), "%"))
print("--------------------")
file_name <- sprintf("../all_data/chicago_taxi_%04d_%02d.csv", year, month)
write_csv(final_data, file_name)
cat("  ✔ Saved:", file_name, "- Total rows:", nrow(final_data), "\n")
} else {
cat("  ⚠ No data for:", year, month, "\n")
}
}
}
