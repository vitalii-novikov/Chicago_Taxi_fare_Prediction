---
title: "Download and Preperation"
author: "Nicolas Pozdena BSc."
format: html
editor: visual
---

```{r echo: false}

ensureLibrary <- function(pkg) {
  if (!requireNamespace(pkg, quietly = TRUE)) {
    install.packages(pkg)
  }
  library(pkg, character.only = TRUE)
}

ensureLibrary("httr")
ensureLibrary("jsonlite")
ensureLibrary("dplyr")
ensureLibrary("tidyr")
ensureLibrary("lubridate")
ensureLibrary("ggplot2")
ensureLibrary("readr")
ensureLibrary("caret")
ensureLibrary("purrr")



```

## Download

```{r}



clean_chunk <- function(df) {
  
    cols_to_drop <- c(
    "trip_id", 
    "taxi_id",
    "payment_type",
    "company",
    "trip_end_timestamp",
    "tips",
    "tolls",
    "extras",
    "trip_total",
    "pickup_community_area",
    "dropoff_community_area"
  )
  
  
  df <- df %>%
    select(-any_of(cols_to_drop)) %>%
    mutate(across(c(trip_seconds, trip_miles, fare),  as.numeric)) %>%
    mutate(
      trip_start_timestamp = ymd_hms(trip_start_timestamp)
    ) %>%
    filter(
      if_all(c(trip_seconds, trip_miles, fare), ~ !is.na(.) & . > 0),
      !is.na(trip_start_timestamp)
    ) %>%
    mutate(
      speed_mph = (trip_miles / (trip_seconds / 3600)),
      valid_speed = speed_mph >= 1 & speed_mph <= 70
    ) %>%
    filter(valid_speed) %>%
    transmute(
      trip_start_timestamp,
      pickup_census_tract,
      dropoff_census_tract,
      pickup_centroid_location,
      dropoff_centroid_location,
      trip_seconds,
      trip_miles,
      fare,
      year = year(trip_start_timestamp),
      month = month(trip_start_timestamp),
      weekday = wday(trip_start_timestamp, label = TRUE),
      time_decimal = hour(trip_start_timestamp) + minute(trip_start_timestamp) / 60 + second(trip_start_timestamp) / 3600
    )
  
  return(df)
}

getData <- function(years, months = 1:12)
{
  limit = 50000
  base_url = "https://data.cityofchicago.org/resource/wrvz-psew.json"
  for (year in years) {
    for (month in months) {
      start_date <- sprintf("%04d-%02d-01T00:00:00", year, month)
      end_date <- if (month == 12) {
        sprintf("%04d-01-01T00:00:00", year + 1)
      } else {
        sprintf("%04d-%02d-01T00:00:00", year, month + 1)
      }
      
      print(start_date)
      print(end_date)
  
      offset <- 0
      all_data <- list()
  
      cat("Downloading:", year, month, "\n")
  
      repeat {
        resp <- GET(
          url = base_url,
          query = list(
            `$where` = paste0(
              "trip_start_timestamp >= '", start_date, "' AND ",
              "trip_start_timestamp < '", end_date, "' AND ",
              "trip_miles > 0 AND fare > 0 AND trip_seconds > 0 AND ",
              "pickup_census_tract IS NOT NULL AND dropoff_census_tract IS NOT NULL"
            ),
            `$limit` = limit,
            `$offset` = format(offset, scientific = FALSE)
          )
        )
  
        if (status_code(resp) != 200) {
          warning("API error at ", year, "-", month, " offset ", offset)
          break
        }
  
        data_chunk <- fromJSON(rawToChar(resp$content))
        cat(sprintf("  Rows downloaded in chunk: %d\n", nrow(data_chunk)))
        
        if (length(data_chunk) == 0) break
  
        clean_data <- clean_chunk(data_chunk)
        all_data[[length(all_data) + 1]] <- clean_data
  
        cat(sprintf("  Rows downloaded so far: %d\n", length(all_data)))
        offset <- offset + limit
      }
  
      if (length(all_data) > 0) {
        final_data <- bind_rows(all_data)
  
        cat("--------------------\n")
        cat(sprintf("Cleaned final data for %04d-%02d: %d rows\n", year, month, nrow(final_data)))
        cat("--------------------\n")
        
        
        # Remove all list or matrix columns
        final_data <- final_data[, !sapply(final_data, function(col) is.list(col) || is.matrix(col))]
        
        # Optionally: coerce columns like weekday (which might be ordered factors) into characters
        final_data <- final_data %>%
          mutate(across(where(is.factor), as.character))
          
        dir.create("../all_data", showWarnings = FALSE, recursive = TRUE)
        file_name <- sprintf("../all_data/chicago_taxi_%04d_%02d.csv", year, month)
        write_csv(final_data, file_name)
        cat("  ✔ Saved:", file_name, "\n")
      } else {
        cat("  ⚠ No usable data for:", year, month, "\n")
      }
    }
  }
}
```

```{r}
find_missing_files_by_year <- function(folder_path) {
  # Generate expected year-month combinations
  years <- 2013:2023
  months <- 1:12
  expected <- expand.grid(year = years, month = months)
  
  # Format expected filenames
  expected$filename <- sprintf("chicago_taxi_%d_%02d.csv", expected$year, expected$month)
  
  # List actual files in folder
  actual_files <- list.files(folder_path)
  
  # Find which are missing
  missing <- expected[!(expected$filename %in% actual_files), ]
  
  # Group by year and return list of months
  missing_list <- split(missing$month, missing$year)
  
  return(missing_list)
}

# Example usage
folder <- "../all_data"  # adjust path
missing <- find_missing_files_by_year(folder)


```

```{r}
for (year in names(missing)) {
  months <- missing[[year]]
  if (length(months) > 0) {
    getData(c(as.integer(year)), months)
  }
}
```
