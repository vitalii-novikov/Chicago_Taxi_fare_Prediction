# RMSE_10min Bar Plot
p_rmse10 <- ggplot(data.frame(Value = rmse_10min), aes(x = "RMSE (10min)", y = Value)) +
geom_col(fill = ifelse(rmse_10min <= 2, "green", "red"), width = 0.5) +
geom_hline(yintercept = 2, linetype = "dashed", color = "black") +
geom_text(aes(label = round(Value, 2)), vjust = -0.5, size = 4) +
scale_y_continuous(expand = expansion(mult = c(0, 0.2))) +
labs(
title = "RMSE scaled to 10 minutes",
x = NULL,
y = NULL
) +
theme_minimal() +
ylim(c(0,5))
# Mean AE % Bar Plot
p_ae_percent <- ggplot(data.frame(Value = mean_ae_percent), aes(x = "Mean AE %", y = Value)) +
geom_col(fill = ifelse(mean_ae_percent <= 5, "green", "red"), width = 0.5) +
geom_hline(yintercept = 5, linetype = "dashed", color = "black") +
geom_text(aes(label = round(Value, 3)), vjust = -0.5, size = 4) +
scale_y_continuous(expand = expansion(mult = c(0, 0.2))) +
labs(
title = "Mean Absolute Error %",
x = NULL,
y = NULL
) +
theme_minimal() +
ylim(c(0,100))
# --- Combine plots ---
combined_plot <- (p_pred | p_metrics) / ((p_rmse10 | p_ae_percent) | p_individual)
return(combined_plot)
}
remove_outliers_z <- function(df, feature1, feature2, threshold = 3) {
z1 <- abs(scale(df[[feature1]]))
z2 <- abs(scale(df[[feature2]]))
df_clean <- df[(z1 < threshold) & (z2 < threshold), ]
return(df_clean)
}
df <- load_all_csv("../all_data/datasets")
form <- fare ~ .
percentage <- 0.8
print(df)
names(df)
models <- list(             # handled in its own block      # random-forest
"NEURALNET" = neuralnet        # feed-forward neural net
)
# -----------------------------------------------------------------------------
dataSet <- df[["../all_data/datasets/dsSmall.csv"]] %>% filter(trip_seconds > 60)
dataSet <- na.omit(dataSet)
dataSet$weekday <- as.numeric(factor(dataSet$weekday))
dataSet$fareSeconds <- dataSet$fare/dataSet$trip_seconds
dataSet <- remove_outliers_z(dataSet, "fare", "fareSeconds", 1.5)
dataSet <- remove_outliers_z(dataSet, "trip_miles", "trip_seconds", 1.5)
dataSet <- dataSet %>% select(-fareSeconds)
train_index <- sample(1:nrow(dataSet), percentage * nrow(dataSet))
train <- dataSet[train_index, ]
test <- dataSet[-train_index, ]
scale_params <- preProcess(train[, -which(names(train) == "fare")], method = c("center", "scale"))
train <- predict(scale_params, train)
test <- predict(scale_params, test)
# Extract target and clean test set
y <- test$fare
for (m in names(models)) {
print(sprintf("▶️  Working on %s with %s …", m, ds))
tryCatch({
if (m == "RF") {
# ----- Random-Forest --------------------------------------------------
model_obj <- randomForest(formula_all, data = train, na.action = na.omit)
pred <- predict(model_obj, newdata = test, type = "response")
} else if (m == "NEURALNET") {
# ----- Neural-net -----------------------------------------------------
# neuralnet needs purely numeric matrix input
nn_train <- model.matrix(form, data = train)[, -1]  # drop intercept
nn_test  <- model.matrix(form, data = test)[, -1]
nn_df <- cbind(fare = train$fare, as.data.frame(nn_train))
nn_formula <- as.formula(paste("fare ~",
paste(colnames(nn_train), collapse = " + ")))
model_obj <- neuralnet("fare ~ .", data = nn_df, hidden = c(10, 5),
linear.output = TRUE, stepmax = 1e6)
pred_raw <- compute(model_obj, nn_test)$net.result
pred <- as.numeric(pred_raw)
} else {
}
# ----- common evaluation ----------------------------------------------
print(evaluate_and_plot_full_model(
y               = y,
duration_seconds = test$trip_seconds,
prediction      = pred,
model           = m,
dataset         = ds
))
}, error = function(e) {
message(sprintf("❌ Error with model %s on dataset %s: %s", m, ds, e$message))
})
}
models <- list(             # handled in its own block      # random-forest
"NEURALNET" = neuralnet        # feed-forward neural net
)
# -----------------------------------------------------------------------------
dataSet <- df[["../all_data/datasets/dsSmall.csv"]] %>% filter(trip_seconds > 60)
dataSet <- na.omit(dataSet)
dataSet$weekday <- as.numeric(factor(dataSet$weekday))
dataSet$fareSeconds <- dataSet$fare/dataSet$trip_seconds
dataSet <- remove_outliers_z(dataSet, "fare", "fareSeconds", 1.5)
dataSet <- remove_outliers_z(dataSet, "trip_miles", "trip_seconds", 1.5)
dataSet <- dataSet %>% select(-fareSeconds)
train_index <- sample(1:nrow(dataSet), percentage * nrow(dataSet))
train <- dataSet[train_index, ]
test <- dataSet[-train_index, ]
scale_params <- preProcess(train[, -which(names(train) == "fare")], method = c("center", "scale"))
train <- predict(scale_params, train)
test <- predict(scale_params, test)
# Extract target and clean test set
y <- test$fare
for (m in names(models)) {
print(sprintf("▶️  Working on %s with %s …", m, ds))
tryCatch({
if (m == "RF") {
# ----- Random-Forest --------------------------------------------------
model_obj <- randomForest(formula_all, data = train, na.action = na.omit)
pred <- predict(model_obj, newdata = test, type = "response")
} else if (m == "NEURALNET") {
# ----- Neural-net -----------------------------------------------------
# neuralnet needs purely numeric matrix input
nn_train <- model.matrix(form, data = train)[, -1]  # drop intercept
nn_test  <- model.matrix(form, data = test)[, -1]
nn_df <- cbind(fare = train$fare, as.data.frame(nn_train))
nn_formula <- as.formula(paste("fare ~",
paste(colnames(nn_train), collapse = " + ")))
model_obj <- neuralnet("fare ~ .", data = nn_df, hidden = c(10, 5),
linear.output = TRUE, stepmax = 1e6)
pred_raw <- compute(model_obj, nn_test)$net.result
pred <- as.numeric(pred_raw)
} else {
}
# ----- common evaluation ----------------------------------------------
print(evaluate_and_plot_full_model(
y               = y,
duration_seconds = test$trip_seconds,
prediction      = pred,
model           = m,
dataset         = "../all_data/datasets/dsSmall.csv"
))
}, error = function(e) {
message(sprintf("❌ Error with model %s on dataset %s: %s", m, ds, e$message))
})
}
models <- list(             # handled in its own block      # random-forest
"NEURALNET" = neuralnet        # feed-forward neural net
)
# -----------------------------------------------------------------------------
dataSet <- df[["../all_data/datasets/dsSmall.csv"]] %>% filter(trip_seconds > 60)
dataSet <- na.omit(dataSet)
dataSet$weekday <- as.numeric(factor(dataSet$weekday))
dataSet$fareSeconds <- dataSet$fare/dataSet$trip_seconds
dataSet <- remove_outliers_z(dataSet, "fare", "fareSeconds", 1.5)
dataSet <- remove_outliers_z(dataSet, "trip_miles", "trip_seconds", 1.5)
dataSet <- dataSet %>% select(-fareSeconds)
train_index <- sample(1:nrow(dataSet), percentage * nrow(dataSet))
train <- dataSet[train_index, ]
test <- dataSet[-train_index, ]
scale_params <- preProcess(train[, -which(names(train) == "fare")], method = c("center", "scale"))
train <- predict(scale_params, train)
test <- predict(scale_params, test)
# Extract target and clean test set
y <- test$fare
for (m in names(models)) {
print(sprintf("▶️  Working on %s with %s …", m, ds))
tryCatch({
if (m == "RF") {
# ----- Random-Forest --------------------------------------------------
model_obj <- randomForest(formula_all, data = train, na.action = na.omit)
pred <- predict(model_obj, newdata = test, type = "response")
} else if (m == "NEURALNET") {
# ----- Neural-net -----------------------------------------------------
# neuralnet needs purely numeric matrix input
nn_train <- model.matrix(form, data = train)[, -1]  # drop intercept
nn_test  <- model.matrix(form, data = test)[, -1]
nn_df <- cbind(fare = train$fare, as.data.frame(nn_train))
nn_formula <- as.formula(paste("fare ~",
paste(colnames(nn_train), collapse = " + ")))
model_obj <- neuralnet("fare ~ .", data = nn_df, hidden = c(10, 5),
linear.output = TRUE, stepmax = 1e6)
pred_raw <- compute(model_obj, nn_test)$net.result
pred <- as.numeric(pred_raw)
} else {
}
# ----- common evaluation ----------------------------------------------
print(evaluate_and_plot_full_model(
y               = y,
duration_seconds = test$trip_seconds,
prediction      = pred,
model           = m,
dataset         = "../all_data/datasets/dsSmall.csv"
))
}, error = function(e) {
message(sprintf("❌ Error with model %s on dataset %s: %s", m, d$message))
})
}
models <- list(             # handled in its own block      # random-forest
"NEURALNET" = neuralnet        # feed-forward neural net
)
# -----------------------------------------------------------------------------
dataSet <- df[["../all_data/datasets/dsSmall.csv"]] %>% filter(trip_seconds > 60)
dataSet <- na.omit(dataSet)
dataSet$weekday <- as.numeric(factor(dataSet$weekday))
dataSet$fareSeconds <- dataSet$fare/dataSet$trip_seconds
dataSet <- remove_outliers_z(dataSet, "fare", "fareSeconds", 1.5)
dataSet <- remove_outliers_z(dataSet, "trip_miles", "trip_seconds", 1.5)
dataSet <- dataSet %>% select(-fareSeconds)
train_index <- sample(1:nrow(dataSet), percentage * nrow(dataSet))
train <- dataSet[train_index, ]
test <- dataSet[-train_index, ]
scale_params <- preProcess(train[, -which(names(train) == "fare")], method = c("center", "scale"))
train <- predict(scale_params, train)
test <- predict(scale_params, test)
# Extract target and clean test set
y <- test$fare
for (m in names(models)) {
print(sprintf("▶️  Working on %s with  …", m, ))
tryCatch({
if (m == "RF") {
# ----- Random-Forest --------------------------------------------------
model_obj <- randomForest(formula_all, data = train, na.action = na.omit)
pred <- predict(model_obj, newdata = test, type = "response")
} else if (m == "NEURALNET") {
# ----- Neural-net -----------------------------------------------------
# neuralnet needs purely numeric matrix input
nn_train <- model.matrix(form, data = train)[, -1]  # drop intercept
nn_test  <- model.matrix(form, data = test)[, -1]
nn_df <- cbind(fare = train$fare, as.data.frame(nn_train))
nn_formula <- as.formula(paste("fare ~",
paste(colnames(nn_train), collapse = " + ")))
model_obj <- neuralnet("fare ~ .", data = nn_df, hidden = c(10, 5),
linear.output = TRUE, stepmax = 1e6)
pred_raw <- compute(model_obj, nn_test)$net.result
pred <- as.numeric(pred_raw)
} else {
}
# ----- common evaluation ----------------------------------------------
print(evaluate_and_plot_full_model(
y               = y,
duration_seconds = test$trip_seconds,
prediction      = pred,
model           = m,
dataset         = "../all_data/datasets/dsSmall.csv"
))
}, error = function(e) {
message(sprintf("❌ Error with model %s on dataset %s", m, d$message))
})
}
models <- list(             # handled in its own block      # random-forest
"NEURALNET" = neuralnet        # feed-forward neural net
)
# -----------------------------------------------------------------------------
dataSet <- df[["../all_data/datasets/dsSmall.csv"]] %>% filter(trip_seconds > 60)
dataSet <- na.omit(dataSet)
dataSet$weekday <- as.numeric(factor(dataSet$weekday))
dataSet$fareSeconds <- dataSet$fare/dataSet$trip_seconds
dataSet <- remove_outliers_z(dataSet, "fare", "fareSeconds", 1.5)
dataSet <- remove_outliers_z(dataSet, "trip_miles", "trip_seconds", 1.5)
dataSet <- dataSet %>% select(-fareSeconds)
train_index <- sample(1:nrow(dataSet), percentage * nrow(dataSet))
train <- dataSet[train_index, ]
test <- dataSet[-train_index, ]
scale_params <- preProcess(train[, -which(names(train) == "fare")], method = c("center", "scale"))
train <- predict(scale_params, train)
test <- predict(scale_params, test)
# Extract target and clean test set
y <- test$fare
for (m in names(models)) {
print(sprintf("▶️  Working on %s with  …", m ))
tryCatch({
if (m == "RF") {
# ----- Random-Forest --------------------------------------------------
model_obj <- randomForest(formula_all, data = train, na.action = na.omit)
pred <- predict(model_obj, newdata = test, type = "response")
} else if (m == "NEURALNET") {
# ----- Neural-net -----------------------------------------------------
# neuralnet needs purely numeric matrix input
nn_train <- model.matrix(form, data = train)[, -1]  # drop intercept
nn_test  <- model.matrix(form, data = test)[, -1]
nn_df <- cbind(fare = train$fare, as.data.frame(nn_train))
nn_formula <- as.formula(paste("fare ~",
paste(colnames(nn_train), collapse = " + ")))
model_obj <- neuralnet("fare ~ .", data = nn_df, hidden = c(10, 5),
linear.output = TRUE, stepmax = 1e6)
pred_raw <- compute(model_obj, nn_test)$net.result
pred <- as.numeric(pred_raw)
} else {
}
# ----- common evaluation ----------------------------------------------
print(evaluate_and_plot_full_model(
y               = y,
duration_seconds = test$trip_seconds,
prediction      = pred,
model           = m,
dataset         = "../all_data/datasets/dsSmall.csv"
))
}, error = function(e) {
message(sprintf("❌ Error with model %s on dataset %s", m, d$message))
})
}
models <- list(             # handled in its own block      # random-forest
"NEURALNET" = neuralnet        # feed-forward neural net
)
# -----------------------------------------------------------------------------
dataSet <- df[["../all_data/datasets/dsSmall.csv"]] %>% filter(trip_seconds > 60)
dataSet <- na.omit(dataSet)
dataSet$weekday <- as.numeric(factor(dataSet$weekday))
dataSet$fareSeconds <- dataSet$fare/dataSet$trip_seconds
dataSet <- remove_outliers_z(dataSet, "fare", "fareSeconds", 1.5)
dataSet <- remove_outliers_z(dataSet, "trip_miles", "trip_seconds", 1.5)
dataSet <- dataSet %>% select(-fareSeconds)
train_index <- sample(1:nrow(dataSet), percentage * nrow(dataSet))
train <- dataSet[train_index, ]
test <- dataSet[-train_index, ]
scale_params <- preProcess(train[, -which(names(train) == "fare")], method = c("center", "scale"))
train <- predict(scale_params, train)
test <- predict(scale_params, test)
# Extract target and clean test set
y <- test$fare
for (m in names(models)) {
print(sprintf("▶️  Working on %s with  …", m ))
tryCatch({
if (m == "RF") {
# ----- Random-Forest --------------------------------------------------
model_obj <- randomForest(formula_all, data = train, na.action = na.omit)
pred <- predict(model_obj, newdata = test, type = "response")
} else if (m == "NEURALNET") {
# ----- Neural-net -----------------------------------------------------
# neuralnet needs purely numeric matrix input
nn_train <- model.matrix(form, data = train)[, -1]  # drop intercept
nn_test  <- model.matrix(form, data = test)[, -1]
nn_df <- cbind(fare = train$fare, as.data.frame(nn_train))
nn_formula <- as.formula(paste("fare ~",
paste(colnames(nn_train), collapse = " + ")))
model_obj <- neuralnet("fare ~ .", data = nn_df, hidden = c(3, 4),
linear.output = TRUE, stepmax = 1e6)
pred_raw <- compute(model_obj, nn_test)$net.result
pred <- as.numeric(pred_raw)
} else {
}
# ----- common evaluation ----------------------------------------------
print(evaluate_and_plot_full_model(
y               = y,
duration_seconds = test$trip_seconds,
prediction      = pred,
model           = m,
dataset         = "../all_data/datasets/dsSmall.csv"
))
}, error = function(e) {
message(sprintf("❌ Error with model %s on dataset %s", m, d$message))
})
}
models <- list(             # handled in its own block      # random-forest
"NEURALNET" = neuralnet        # feed-forward neural net
)
# -----------------------------------------------------------------------------
dataSet <- df[["../all_data/datasets/dsSmall.csv"]] %>% filter(trip_seconds > 60)
dataSet <- na.omit(dataSet)
dataSet$weekday <- as.numeric(factor(dataSet$weekday))
dataSet$fareSeconds <- dataSet$fare/dataSet$trip_seconds
dataSet <- remove_outliers_z(dataSet, "fare", "fareSeconds", 1.5)
dataSet <- remove_outliers_z(dataSet, "trip_miles", "trip_seconds", 1.5)
dataSet <- dataSet %>% select(-fareSeconds)
train_index <- sample(1:nrow(dataSet), percentage * nrow(dataSet))
train <- dataSet[train_index, ]
test <- dataSet[-train_index, ]
scale_params <- preProcess(train[, -which(names(train) == "fare")], method = c("center", "scale"))
train <- predict(scale_params, train)
test <- predict(scale_params, test)
# Extract target and clean test set
y <- test$fare
for (m in names(models)) {
print(sprintf("▶️  Working on %s with  …", m ))
tryCatch({
if (m == "RF") {
# ----- Random-Forest --------------------------------------------------
model_obj <- randomForest(formula_all, data = train, na.action = na.omit)
pred <- predict(model_obj, newdata = test, type = "response")
} else if (m == "NEURALNET") {
# ----- Neural-net -----------------------------------------------------
# neuralnet needs purely numeric matrix input
nn_train <- model.matrix(form, data = train)[, -1]  # drop intercept
nn_test  <- model.matrix(form, data = test)[, -1]
nn_df <- cbind(fare = train$fare, as.data.frame(nn_train))
nn_formula <- as.formula(paste("fare ~",
paste(colnames(nn_train), collapse = " + ")))
model_obj <- neuralnet("fare ~ .", data = nn_df, hidden = c(2),
linear.output = TRUE, stepmax = 1e6)
pred_raw <- compute(model_obj, nn_test)$net.result
pred <- as.numeric(pred_raw)
} else {
}
# ----- common evaluation ----------------------------------------------
print(evaluate_and_plot_full_model(
y               = y,
duration_seconds = test$trip_seconds,
prediction      = pred,
model           = m,
dataset         = "../all_data/datasets/dsSmall.csv"
))
}, error = function(e) {
message(sprintf("❌ Error with model %s on dataset %s", m, d$message))
})
}
models <- list(             # handled in its own block      # random-forest
"NEURALNET" = neuralnet        # feed-forward neural net
)
# -----------------------------------------------------------------------------
dataSet <- df[["../all_data/datasets/dsSmall.csv"]] %>% filter(trip_seconds > 60)
dataSet <- na.omit(dataSet)
dataSet$weekday <- as.numeric(factor(dataSet$weekday))
dataSet$fareSeconds <- dataSet$fare/dataSet$trip_seconds
dataSet <- remove_outliers_z(dataSet, "fare", "fareSeconds", 1.5)
dataSet <- remove_outliers_z(dataSet, "trip_miles", "trip_seconds", 1.5)
dataSet <- dataSet %>% select(-fareSeconds)
train_index <- sample(1:nrow(dataSet), 0.2 * nrow(dataSet))
train <- dataSet[train_index, ]
test <- dataSet[-train_index, ]
scale_params <- preProcess(train[, -which(names(train) == "fare")], method = c("center", "scale"))
train <- predict(scale_params, train)
test <- predict(scale_params, test)
# Extract target and clean test set
y <- test$fare
for (m in names(models)) {
print(sprintf("▶️  Working on %s with  …", m ))
tryCatch({
if (m == "RF") {
# ----- Random-Forest --------------------------------------------------
model_obj <- randomForest(formula_all, data = train, na.action = na.omit)
pred <- predict(model_obj, newdata = test, type = "response")
} else if (m == "NEURALNET") {
# ----- Neural-net -----------------------------------------------------
# neuralnet needs purely numeric matrix input
nn_train <- model.matrix(form, data = train)[, -1]  # drop intercept
nn_test  <- model.matrix(form, data = test)[, -1]
nn_df <- cbind(fare = train$fare, as.data.frame(nn_train))
nn_formula <- as.formula(paste("fare ~",
paste(colnames(nn_train), collapse = " + ")))
model_obj <- neuralnet("fare ~ .", data = nn_df, hidden = c(2),
linear.output = TRUE, stepmax = 1e6)
pred_raw <- compute(model_obj, nn_test)$net.result
pred <- as.numeric(pred_raw)
} else {
}
# ----- common evaluation ----------------------------------------------
print(evaluate_and_plot_full_model(
y               = y,
duration_seconds = test$trip_seconds,
prediction      = pred,
model           = m,
dataset         = "../all_data/datasets/dsSmall.csv"
))
}, error = function(e) {
message(sprintf("❌ Error with model %s on dataset %s", m, d$message))
})
}
models <- list(             # handled in its own block      # random-forest
"NEURALNET" = neuralnet        # feed-forward neural net
)
# -----------------------------------------------------------------------------
dataSet <- df[["../all_data/datasets/dsSmall.csv"]] %>% filter(trip_seconds > 60)
dataSet <- na.omit(dataSet)
dataSet$weekday <- as.numeric(factor(dataSet$weekday))
dataSet$fareSeconds <- dataSet$fare/dataSet$trip_seconds
dataSet <- remove_outliers_z(dataSet, "fare", "fareSeconds", 1.5)
dataSet <- remove_outliers_z(dataSet, "trip_miles", "trip_seconds", 1.5)
dataSet <- dataSet %>% select(-fareSeconds)
train_index <- sample(1:nrow(dataSet), 0.3 * nrow(dataSet))
train <- dataSet[train_index, ]
test <- dataSet[-train_index, ]
scale_params <- preProcess(train[, -which(names(train) == "fare")], method = c("center", "scale"))
train <- predict(scale_params, train)
test <- predict(scale_params, test)
# Extract target and clean test set
y <- test$fare
for (m in names(models)) {
print(sprintf("▶️  Working on %s with  …", m ))
tryCatch({
if (m == "RF") {
# ----- Random-Forest --------------------------------------------------
model_obj <- randomForest(formula_all, data = train, na.action = na.omit)
pred <- predict(model_obj, newdata = test, type = "response")
} else if (m == "NEURALNET") {
# ----- Neural-net -----------------------------------------------------
# neuralnet needs purely numeric matrix input
nn_train <- model.matrix(form, data = train)[, -1]  # drop intercept
nn_test  <- model.matrix(form, data = test)[, -1]
nn_df <- cbind(fare = train$fare, as.data.frame(nn_train))
nn_formula <- as.formula(paste("fare ~",
paste(colnames(nn_train), collapse = " + ")))
model_obj <- neuralnet("fare ~ .", data = nn_df, hidden = c(2),
linear.output = TRUE, stepmax = 1e6)
pred_raw <- compute(model_obj, nn_test)$net.result
pred <- as.numeric(pred_raw)
} else {
}
# ----- common evaluation ----------------------------------------------
print(evaluate_and_plot_full_model(
y               = y,
duration_seconds = test$trip_seconds,
prediction      = pred,
model           = m,
dataset         = "../all_data/datasets/dsSmall.csv"
))
}, error = function(e) {
message(sprintf("❌ Error with model %s on dataset %s", m, d$message))
})
}
setwd("C:\Users\cdadmin\Documents\Chicago_Taxi_fare_Prediction\app")
setwd("C:/Users/cdadmin/Documents/Chicago_Taxi_fare_Prediction/app")
shiny::runApp()
